{"version":3,"file":"simpletreemenu.element.js","sources":["../../../../Our.Umbraco.SimpleTreeMenu.LitClient/src/property-editor-ui/simpletreemenu/simpletreemenu.element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property } from \"@umbraco-cms/backoffice/external/lit\";\nimport type { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/extension-registry\";\n\n\nconst ELEMENT_NAME = 'simpletreemenu';\n\ninterface TreeNode {\n    id: string,\n    name: string,\n    oldId?: string,\n    children: TreeNode[]\n}\n\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement(ELEMENT_NAME)\nexport class SimpleTreeMenuElement extends LitElement implements UmbPropertyEditorUiElement {\n    /**\n     * Copy for the read the docs hint.\n     */\n    @property()\n    docsHint = 'Click on the Vite and Lit logos to learn more'\n\n    @property({ type: String })\n    public value = \"\";\n\n    treeData: TreeNode[] = [];\n\n    render() {\n        return html`\n            <div class=\"draggable-tree\">\n                ${this.treeData.map((node) => this.renderTreeNode(node, null, 0))}\n            </div>\n        `\n    }\n\n    static get properties() {\n        return {\n            treeData: { type: Array },\n            dragOverIndex: { type: Number },\n        };\n    }\n    \n    static styles = css`\n        .tree-node {\n            padding-left: 10px;\n            cursor: pointer;\n            background: rgb(0 0 0 / 4%);\n        }\n      \n        .tree-node:not(:last-child) >.drop-zone.after {\n            display:none;\n        }\n      \n        .tree-node .node-name {\n            display: block;\n            padding: 5px;\n            background: rgb(0 0 0 / 4%);\n        }\n\n        .drop-zone {\n            //margin-left: -20px;\n            min-height: 10px;\n            border-radius: 3px;\n        }\n\n      \n        .tree-node .drop-zone.drag-over, .tree-node .node-name.drag-over {\n            background-color: lightblue !important;\n        }\n    `\n\n    renderTreeNode(node: TreeNode, parent: TreeNode | null, level: number) : any {\n        return html`\n      <div\n        class=\"tree-node\"\n        @dragover=${(e: DragEvent) => this.handleDragOver(e)}\n        @dragleave=${(e: DragEvent) => this.handleDragLeave(e)}\n        @drop=${(e: DragEvent) => this.handleDrop(e, node, parent)}\n        @dragend=${(e: DragEvent) => this.handleDragEnd(e)}\n        draggable=\"true\"\n        @dragstart=${(e: DragEvent) => this.handleDragStart(e, node)}\n      >\n        <div class=\"drop-zone before\"></div>\n        <span class=\"node-name\">${node.name}</span>\n        ${node.children && node.children.length > 0\n                ? html`\n              <div>\n                ${node.children.map((child) => this.renderTreeNode(child, node, level + 1))}\n              </div>\n            `\n                : ''}\n        <div class=\"drop-zone after\"></div>\n      </div>\n    `;\n    }\n    \n    generateGUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    handleDragStart(event: DragEvent, node: TreeNode) {\n\n        if (event.dataTransfer && !event.dataTransfer.getData('text/plain')) {\n            const draggedData = {\n                id: this.generateGUID(),\n                oldId: node.id,\n                name: node.name,\n                children: node.children || []\n            };\n\n            event.dataTransfer.setData('text/plain', JSON.stringify(draggedData));\n        }\n    }\n\n\n    getParentNode(node: TreeNode, tree: TreeNode[]): TreeNode | null {\n        for (const item of tree) {\n            if (item.children && item.children.includes(node)) {\n                return item;\n            } else if (item.children) {\n                const parent = this.getParentNode(node, item.children);\n                if (parent) {\n                    return parent;\n                }\n            }\n        }\n        return null;\n    }\n\n    handleDragOver(event: DragEvent) {\n        event.preventDefault();\n        if (event.target)\n            (event.target as Element).classList.add('drag-over');\n    }\n\n    handleDragLeave(event: DragEvent) {\n        if (event.target)\n            (event.target as Element).classList.remove('drag-over');\n    }\n\n    handleDragEnd(event: DragEvent) {\n        this.dragClean(event);\n    }\n\n    dragClean(event: DragEvent) {\n        try {\n            Array.from(this.shadowRoot?.querySelectorAll('.drag-over') || []).forEach(x => {\n                x.classList.remove(\"drag-over\");\n            });\n        } catch { }\n\n        if (event && event.dataTransfer)\n            event.dataTransfer.clearData();\n    }\n\n    findNodeById(tree: TreeNode[], id: string): TreeNode | null {\n        if (!tree || !id) {\n            return null;\n        }\n\n        for (const node of tree) {\n            if (node.id === id) {\n                return node;\n            }\n\n            if (node.children) {\n                const foundNode = this.findNodeById(node.children, id);\n                if (foundNode) {\n                    return foundNode;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isDescendantOrSelf(parent: TreeNode, id: string) {\n        if (!parent || !id) {\n            return false;\n        }\n        if (parent.id == id || parent.oldId == id) {\n            return true;\n        }\n        if (parent.children) {\n            for (const child of parent.children) {\n                if (child.oldId === id || child.id === id) {\n                    return true;\n                }\n                if (this.isDescendantOrSelf(child, id)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    handleDrop(event: DragEvent, dropNode: TreeNode, parentNode: TreeNode | null) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const draggedData = event.dataTransfer != null ? JSON.parse(event.dataTransfer.getData('text/plain')) : {};\n        const isDescendantOrSelf = this.isDescendantOrSelf(draggedData, dropNode.id);\n\n        if (event.currentTarget == undefined || isDescendantOrSelf) {\n            this.requestUpdate();\n            return;\n        }\n        const eventTarget = (event.target as Element);\n        const isDropZone = eventTarget.classList.contains(\"drop-zone\") ?? false;\n        const target = eventTarget.closest('.tree-node');\n\n        if (target == null || target.parentElement == null) {\n\n            return;\n        }\n\n        let parent: TreeNode | null = null;\n        const findParent = (node: TreeNode, tree: TreeNode[]): TreeNode | null => {\n            for (let i = 0; i < tree.length; i++) {\n                if (tree[i].id === draggedData.oldId) {\n                    return parent;\n                }\n                if (tree[i].children) {\n                    parent = tree[i];\n                    const found = findParent(node, tree[i].children);\n                    if (found) return found;\n                }\n            }\n            return null;\n        };\n\n        findParent(draggedData, this.treeData);\n\n        const checkTarget = (node: TreeNode, tree: TreeNode[]): TreeNode | null => {\n            for (let i = 0; i < tree.length; i++) {\n                if (tree[i].id === draggedData.oldId) {\n                    return parent;\n                }\n                if (tree[i].children) {\n                    parent = tree[i];\n                    const found = findParent(node, tree[i].children);\n                    if (found) return found;\n                }\n            }\n            return null;\n        };\n\n        checkTarget(draggedData, this.treeData);\n\n        // Determine the position where the node should be inserted (before or after siblings)\n        const index = [...target.parentElement.children].indexOf(target);\n        const position = eventTarget.classList.contains('before') ? 'before' : 'after';;\n\n        let dropTarget = isDropZone ? parentNode : dropNode;\n\n        // Add dragged node as a child of the drop node\n        if (dropTarget != null && !dropTarget.children) {\n            dropTarget.children = [];\n        }\n\n        var targetList = dropTarget == null ? this.treeData : dropTarget.children;\n\n        if (position === \"before\") {\n            targetList.splice(index, 0, draggedData);\n        } else {\n            targetList.splice(index + 1, 0, draggedData);\n        }\n\n        // Remove dragged node from its original position\n        const removeNode = (node: TreeNode, tree: TreeNode[]) => {\n            for (let i = 0; i < tree.length; i++) {\n                if (tree[i].id === draggedData.oldId) {\n                    tree.splice(i, 1);\n                    return true;\n                }\n                if (tree[i].children && removeNode(node, tree[i].children)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        removeNode(draggedData, this.treeData);\n\n\n        this.requestUpdate();\n    }\n\n    removeNodeFromTree(nodeToRemove: TreeNode, tree = this.treeData) {\n        tree.forEach((node, index) => {\n            if (node === nodeToRemove) {\n                tree.splice(index, 1);\n                return;\n            }\n            if (node.children) {\n                this.removeNodeFromTree(nodeToRemove, node.children);\n            }\n        });\n    }\n    \n}\n\nexport { SimpleTreeMenuElement as element };\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        [ELEMENT_NAME]: SimpleTreeMenuElement\n    }\n}\n"],"names":["ELEMENT_NAME","SimpleTreeMenuElement","LitElement","html","node","parent","level","e","child","c","event","draggedData","tree","item","_a","x","id","foundNode","dropNode","parentNode","isDescendantOrSelf","eventTarget","isDropZone","target","findParent","i","found","index","position","dropTarget","targetList","removeNode","nodeToRemove","css","__decorateClass","property","customElement"],"mappings":"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"}