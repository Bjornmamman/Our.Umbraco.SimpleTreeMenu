{"version":3,"file":"simpletreemenu.element.js","sources":["../../../../Our.Umbraco.SimpleTreeMenu.LitClient/src/property-editor-ui/simpletreemenu/simpletreemenu.element.ts"],"sourcesContent":["import { html, css, customElement, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport type { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UmbPropertyEditorConfigCollection } from \"@umbraco-cms/backoffice/property-editor\";\r\n\n\nconst ELEMENT_NAME = 'simpletreemenu-list';\n\ninterface TreeNode {\n    key: string,\n    name: string,\n    oldKey?: string,\n    level: number,\n    items?: TreeNode[]\n}\n\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement(ELEMENT_NAME)\nexport class SimpleTreeMenuElement extends UmbLitElement implements UmbPropertyEditorUiElement {\n\n    @property({ type: String })\n    public value = \"\";\n\n    @state()\r\n    _doctype?: string;\n\n    @state()\r\n    _nameTemplate?: string;\n\n    @state()\r\n    _levels?: number;\n\n    @property({ attribute: false })\r\n    public set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n        this._doctype = config?.getValueByAlias('doctype') ?? 'MenuNode';\r\n        this._nameTemplate = config?.getValueByAlias('nameTemplate');\r\n        this._levels = parseInt(config?.getValueByAlias('levels') ?? '5', 10);\r\n    }\n\n    treeData: TreeNode[] = [\r\n        {\r\n            key: '00000000-0000-0000-0000-000000000001',\r\n            level: 0,\r\n            name: 'test',\r\n            items: [\r\n                {\r\n                    key: '00000000-0000-0000-0000-000000000002',\r\n                    name: 'child1',\r\n                    level: 1\r\n                },\r\n                {\r\n                    key: '00000000-0000-0000-0000-000000000003',\r\n                    name: 'child2',\r\n                    level: 1\r\n                }, {\r\n                    key: '00000000-0000-0000-0000-000000000004',\r\n                    name: 'child3',\r\n                    level: 1\r\n                }, {\r\n                    key: '00000000-0000-0000-0000-000000000005',\r\n                    name: 'child4',\r\n                    level: 1\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            key: '00000000-0000-0000-0000-000000000010',\r\n            name: 'test2',\r\n            level: 0\r\n        }\n    ];\n\n    render() {\n        return html`\n            <div class=\"draggable-tree\">\n                ${this.treeData.map((node) => this.renderTreeNode(node, null, 0))}\n            </div>\n        `\n    }\n\n    static get properties() {\n        return {\n            treeData: { type: Array },\n            dragOverIndex: { type: Number },\n        };\n    }\n    \n    static styles = css`\n        .tree-node {\n            padding-left: 10px;\n            cursor: pointer;\n            //background: rgb(0 0 0 / 4%);\n            border-radius: var(--uui-border-radius);\n        }\n\n        h1 {\n            font-size: var(--uui-type-h5-size);\r\n            margin: 0;\r\n        }\n      \n        .tree-node:not(:last-child) >.drop-zone.after {\n            display:none;\n        }\n      \n        .tree-node .node-handle {\n            display: block;\n            padding: var(--uui-size-2) var(--uui-size-2) var(--uui-size-2) var(--uui-size-4);\n            background: var(--uui-color-surface-alt);\n            border-radius: var(--uui-border-radius, 3px);\n            display: flex;\n            flex-direction: row;\n            align-items: center;\r\n            justify-content: space-between;\n        }\n\n        .tree-node .node-settings {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\r\n            justify-content: space-between;\r\n            gap: var(--uui-size-4);\r\n        }\n\n        .drop-zone {\n            //margin-left: -20px;\n            min-height: 10px;\n            border-radius: 3px;\n        }\n\n        .tree-node > .node-children:has( > .tree-node > .drop-zone.drag-over) {\n            //background-color: var(--uui-palette-spanish-pink-dimmed) !important;\n            outline: dashed 2px var(--uui-palette-spanish-pink-dimmed);\n        }\n      \n        .tree-node .drop-zone.drag-over, .tree-node .node-handle.drag-over {\n            background-color: var(--uui-color-current) !important;\n        }\n\n        .tree-node .node-handle.drag-over {\n            outline: dashed 2px var(--uui-palette-spanish-pink-dimmed);\n        }\n    `\n\n    renderTreeNode(node: TreeNode, parent: TreeNode | null, level: number) : any {\n        return html`\n      <div\n        class=\"tree-node\"\n        @dragover=${(e: DragEvent) => this.handleDragOver(e)}\n        @dragleave=${(e: DragEvent) => this.handleDragLeave(e)}\n        @drop=${(e: DragEvent) => this.handleDrop(e, node, parent)}\n        @dragend=${(e: DragEvent) => this.handleDragEnd(e)}\n        draggable=\"true\"\n        @dragstart=${(e: DragEvent) => this.handleDragStart(e, node)}\n      >\n        <div class=\"drop-zone before\"></div>\n        <div class=\"node-handle\">\n            <h1>${node.name}</h1>\n\n            <div class=\"node-settings\">\n                ${node.items && node.items.length > 0 ? html`\n                    <uui-badge style=\"--uui-badge-position: relative; --uui-badge-inset: 0\" look=\"secondary\" color=\"default\">${node.items.length} children</uui-badge>\n                `: ''}\n                <uui-badge style=\"--uui-badge-position: relative; --uui-badge-inset: 0\" look=\"secondary\" color=\"default\">Level ${node.level + 1} of 3</uui-badge>\n                \n                <uui-icon-registry-essential>\r\n                  <uui-action-bar>\r\n\r\n                    <uui-button look=\"primary\" color=\"default\" label=\"Edit\">\r\n                      <uui-icon name=\"edit\"></uui-icon>\r\n                    </uui-button>\r\n\r\n                    <uui-button look=\"primary\" color=\"default\" label=\"Add\">\r\n                      <uui-icon name=\"add\"></uui-icon>\r\n                    </uui-button>\r\n\r\n                    <uui-button look=\"primary\" color=\"default\" label=\"Delete\">\r\n                      <uui-icon name=\"delete\"></uui-icon>\r\n                    </uui-button>\r\n\r\n                  </uui-action-bar>\r\n                </uui-icon-registry-essential>\n            </div>\n        </div>\n\n        ${node.items && node.items.length > 0 ? html`\n            <div class=\"node-children\">\n            ${node.items.map((child) => this.renderTreeNode(child, node, level + 1))}\n            </div>\n        `: ''}\n        <div class=\"drop-zone after\"></div>\n      </div>\n    `;\n    }\n    \n    generateGUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    handleDragStart(event: DragEvent, node: TreeNode) {\n\n        if (event.dataTransfer && !event.dataTransfer.getData('text/plain')) {\n            const draggedData = {\n                key: this.generateGUID(),\n                oldKey: node.key,\n                name: node.name,\n                items: node.items || []\n            };\n\n            console.log(draggedData);\n\n            event.dataTransfer.setData('text/plain', JSON.stringify(draggedData));\n        }\n    }\n\n\n    getParentNode(node: TreeNode, tree: TreeNode[]): TreeNode | null {\n        for (const item of tree) {\n            if (item.items && item.items.includes(node)) {\n                return item;\n            } else if (item.items) {\n                const parent = this.getParentNode(node, item.items);\n                if (parent) {\n                    return parent;\n                }\n            }\n        }\n        return null;\n    }\n\n    handleDragOver(event: DragEvent) {\n        event.preventDefault();\n        if (event.target)\n            (event.target as Element).classList.add('drag-over');\n    }\n\n    handleDragLeave(event: DragEvent) {\n        if (event.target)\n            (event.target as Element).classList.remove('drag-over');\n    }\n\n    handleDragEnd(event: DragEvent) {\n        this.dragClean(event);\n    }\n\n    dragClean(event: DragEvent) {\n        try {\n            Array.from(this.shadowRoot?.querySelectorAll('.drag-over') || []).forEach(x => {\n                x.classList.remove(\"drag-over\");\n            });\n        } catch { }\n\n        if (event && event.dataTransfer)\n            event.dataTransfer.clearData();\n    }\n\n    findNodeById(tree: TreeNode[], key: string): TreeNode | null {\n        if (!tree || !key) {\n            return null;\n        }\n\n        for (const node of tree) {\n            if (node.key === key) {\n                return node;\n            }\n\n            if (node.items) {\n                const foundNode = this.findNodeById(node.items, key);\n                if (foundNode) {\n                    return foundNode;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isDescendantOrSelf(parent: TreeNode, key: string) {\n        if (!parent || !key) {\n            return false;\n        }\n        if (parent.key == key || parent.oldKey == key) {\n            return true;\n        }\n        if (parent.items) {\n            for (const child of parent.items) {\n                if (child.oldKey === key || child.key === key) {\n                    return true;\n                }\n                if (this.isDescendantOrSelf(child, key)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    handleDrop(event: DragEvent, dropNode: TreeNode, parentNode: TreeNode | null) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const draggedData = event.dataTransfer != null ? JSON.parse(event.dataTransfer.getData('text/plain')) : {};\n        const isDescendantOrSelf = this.isDescendantOrSelf(draggedData, dropNode.key);\n\n        if (event.currentTarget == undefined || isDescendantOrSelf) {\n            this.requestUpdate();\n            return;\n        }\n        const eventTarget = (event.target as Element);\n        const isDropZone = eventTarget.classList.contains(\"drop-zone\") ?? false;\n        const target = eventTarget.closest('.tree-node');\n\n        if (target == null || target.parentElement == null) {\n\n            return;\n        }\n\n        let parent: TreeNode | null = null;\n        const findParent = (node: TreeNode, tree: TreeNode[]): TreeNode | null => {\n            for (let i = 0; i < tree.length; i++) {\n                if (tree[i].key === draggedData.oldKey) {\n                    return parent;\n                }\n                if (tree[i].items) {\n                    parent = tree[i];\n                    const found = findParent(node, tree[i].items);\n                    if (found) return found;\n                }\n            }\n            return null;\n        };\n\n        findParent(draggedData, this.treeData);\n\n        const checkTarget = (node: TreeNode, tree: TreeNode[]): TreeNode | null => {\n            for (let i = 0; i < tree.length; i++) {\n                if (tree[i].key === draggedData.oldKey) {\n                    return parent;\n                }\n                if (tree[i].items) {\n                    parent = tree[i];\n                    const found = findParent(node, tree[i].items);\n                    if (found) return found;\n                }\n            }\n            return null;\n        };\n\n        checkTarget(draggedData, this.treeData);\n\n        // Determine the position where the node should be inserted (before or after siblings)\n        const index = [...target.parentElement.children].indexOf(target);\n        const position = eventTarget.classList.contains('before') ? 'before' : 'after';;\n\n        let dropTarget = isDropZone ? parentNode : dropNode;\n\n        // Add dragged node as a child of the drop node\n        if (dropTarget != null && !dropTarget.items) {\n            dropTarget.items = [];\n        }\n\n        var targetList = dropTarget == null ? this.treeData : dropTarget.items;\n        draggedData.level = dropTarget == null ? 0 : dropTarget.level + 1;\n\n        if (!targetList) {\n            return;\r\n        }\n\n        if (position === \"before\") {\n            targetList.splice(index, 0, draggedData);\n        } else {\n            targetList.splice(index + 1, 0, draggedData);\n        }\n\n        console.log(\"REMOVE\", draggedData.oldKey);\n        // Remove dragged node from its original position\n        const removeNode = (node: TreeNode, tree: TreeNode[]) => {\n            console.log(\"TREE\", tree);            \n            for (let i = 0; i < tree.length; i++) {\n                console.log(tree[i].key, draggedData.oldKey, tree[i].key === draggedData.oldKe);\n                if (tree[i].key === draggedData.oldKey) {\n                    tree.splice(i, 1);\n                    return true;\n                    console.log(\"REMOVED\", i, tree[i].key, draggedData.oldKey, tree[i].key === draggedData.oldKe);\n                }\n                if (tree[i].items && removeNode(node, tree[i].items)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n        console.log(this.treeData);\n        removeNode(draggedData, this.treeData);\n\n\n        this.requestUpdate();\n    }\n\n    removeNodeFromTree(nodeToRemove: TreeNode, tree = this.treeData) {\n        tree.forEach((node, index) => {\n            if (node === nodeToRemove) {\n                tree.splice(index, 1);\n                return;\n            }\n            if (node.items) {\n                this.removeNodeFromTree(nodeToRemove, node.items);\n            }\n        });\n    }\n    \n}\n\nexport { SimpleTreeMenuElement as element };\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        [ELEMENT_NAME]: SimpleTreeMenuElement\n    }\n}\n"],"names":["ELEMENT_NAME","SimpleTreeMenuElement","UmbLitElement","config","html","node","parent","level","e","child","c","event","draggedData","tree","item","_a","x","key","foundNode","dropNode","parentNode","isDescendantOrSelf","eventTarget","isDropZone","target","findParent","found","index","position","dropTarget","targetList","removeNode","nodeToRemove","css","__decorateClass","property","state","customElement"],"mappings":"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"}